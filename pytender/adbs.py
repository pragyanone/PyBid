bs_data = """
30,32,31,32,31,30,30,30,29,30,29,31,
31,31,32,31,31,31,30,29,30,29,30,30,
31,31,32,32,31,30,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,31,
30,32,31,32,31,30,30,30,29,30,29,31,
31,31,32,31,31,31,30,29,30,29,30,30,
31,31,32,32,31,30,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,31,
31,31,31,32,31,31,29,30,30,29,29,31,
31,31,32,31,31,31,30,29,30,29,30,30,
31,31,32,32,31,30,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,31,
31,31,31,32,31,31,29,30,30,29,30,30,
31,31,32,31,31,31,30,29,30,29,30,30,
31,31,32,32,31,30,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,31,
31,31,31,32,31,31,29,30,30,29,30,30,
31,31,32,31,31,31,30,29,30,29,30,30,
31,32,31,32,31,30,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,30,29,31,
31,31,31,32,31,31,30,29,30,29,30,30,
31,31,32,31,31,31,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,30,
31,32,31,32,31,30,30,30,29,30,29,31,
31,31,31,32,31,31,30,29,30,29,30,30,
31,31,32,31,31,31,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,31,
30,32,31,32,31,30,30,30,29,30,29,31,
31,31,32,31,31,31,30,29,30,29,30,30,
31,31,32,31,32,30,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,31,
30,32,31,32,31,30,30,30,29,30,29,31,
31,31,32,31,31,31,30,29,30,29,30,30,
31,31,32,32,31,30,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,31,
30,32,31,32,31,31,29,30,30,29,29,31,
31,31,32,31,31,31,30,29,30,29,30,30,
31,31,32,32,31,30,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,31,
31,31,31,32,31,31,29,30,30,29,30,30,
31,31,32,31,31,31,30,29,30,29,30,30,
31,31,32,32,31,30,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,31,
31,31,31,32,31,31,29,30,30,29,30,30,
31,31,32,31,31,31,30,29,30,29,30,30,
31,32,31,32,31,30,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,31,
31,31,31,32,31,31,30,29,30,29,30,30,
31,31,32,31,31,31,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,30,
31,32,31,32,31,30,30,30,29,30,29,31,
31,31,31,32,31,31,30,29,30,29,30,30,
31,31,32,31,31,31,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,30,
31,32,31,32,31,30,30,30,29,30,29,31,
31,31,32,31,31,31,30,29,30,29,30,30,
31,31,32,31,32,30,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,31,
30,32,31,32,31,30,30,30,29,30,29,31,
31,31,32,31,31,31,30,29,30,29,30,30,
31,31,32,32,31,30,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,31,
30,32,31,32,31,31,29,30,29,30,29,31,
31,31,32,31,31,31,30,29,30,29,30,30,
31,31,32,32,31,30,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,31,
31,31,31,32,31,31,29,30,30,29,29,31,
31,31,32,31,31,31,30,29,30,29,30,30,
31,31,32,32,31,30,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,31,
31,31,31,32,31,31,29,30,30,29,30,30,
31,31,32,31,31,31,30,29,30,29,30,30,
31,32,31,32,31,30,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,31,
31,31,31,32,31,31,30,29,30,29,30,30,
31,31,32,31,31,31,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,30,
31,32,31,32,31,30,30,30,29,30,29,31,
31,31,31,32,31,31,30,29,30,29,30,30,
31,31,32,31,31,31,30,29,30,29,30,30,
31,32,31,32,31,30,30,30,29,29,30,30,
31,31,32,32,31,30,30,30,29,30,30,30,
30,32,31,32,31,30,30,30,29,30,30,30,
31,31,32,31,31,30,30,30,29,30,30,30,
31,31,32,31,31,30,30,30,29,30,30,30,
31,32,31,32,30,31,30,30,29,30,30,30,
30,32,31,32,31,30,30,30,29,30,30,30,
31,31,32,31,31,31,30,30,29,30,30,30,
30,31,32,32,30,31,30,30,29,30,30,30,
30,32,31,32,31,30,30,30,29,30,30,30,
30,32,31,32,31,30,30,30,29,30,30,30"""

bs_data = tuple(int(item) for item in bs_data.replace("\n", "").split(","))
ad_data = (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)


def unpackDate(date):
    return [int(item) for item in date.split("-")]


def isLeapYear(year):
    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)


def ad2days(ADdate):
    y, m, d = unpackDate(ADdate)
    days = 0
    y -= 1
    days += int(y * 365 + y / 4 - y / 100 + y / 400)
    days += sum(ad_data[0 : m - 1])
    days += d
    if isLeapYear(y + 1) and m > 2:
        days += 1
    return days


def bs2days(BSdate):
    y, m, d = unpackDate(BSdate)
    days = sum(bs_data[0 : (y - 2000) * 12])
    days += sum(bs_data[(y - 2000) * 12 : (y - 2000) * 12 + m - 1])
    days += d
    return days


def days2ad(days):
    y = 1
    m = 0
    while days > 0:
        d = days
        if m == 12:
            m = 0
            y += 1
        if isLeapYear(y) and m == 1:
            days -= 29
        else:
            days -= ad_data[m]
        m += 1
    m = 12 if m % 12 == 0 else m % 12
    return f"{y}-{m}-{d}"


def days2bs(days):
    y = 2000
    m = 0
    while days > 0:
        d = days
        if m != 0 and m % 12 == 0:
            y += 1
        days -= bs_data[m]
        m += 1
    m = 12 if m % 12 == 0 else m % 12
    return f"{y}-{m}-{d}"


def ad2bs(date):
    return days2bs(ad2days(date) - ad2days("1943-4-14") + 1)


def bs2ad(date):
    return days2ad(bs2days(date) + ad2days("1943-4-14") - 1)


if __name__ == "__main__":
    while True:
        choice = input("1. AD2BS\n2. BS2AD\nq. Quit\nChoice? ")
        if choice == "q":
            break
        date = input("Date: ")
        if choice == "1":
            print(f"BS Date: {ad2bs(date)}")
        elif choice == "2":
            print(f"AD Date: {bs2ad(date)}")
        else:
            print("Invalid Choice")
